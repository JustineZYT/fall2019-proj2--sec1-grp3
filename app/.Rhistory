shiny::runApp()
runApp()
getwd()
runApp()
listings_data <- read.csv("../data/airbnb-open-data-in-nyc/listings.csv", header=TRUE, sep=",")
View(listings_data)
runApp()
runApp()
listings_data <- read.csv("../data/airbnb-open-data-in-nyc/listings.csv", header=TRUE, sep=",")
load('nyc_nbhd.RData')
bins <- c(80, 100, 120, 140, 160, 180,200)
bound<- geojsonio::geojson_read("Borough Boundaries.geojson", what = "sp")
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
delete_name <- c('host_id', "host_name", "last_review", "reviews_per_month",
"calculated_host_listings_count", "availability_365" )
listings <- listings_data[,!(names(listings_data) %in% delete_name)]
listings$room_size <- NA
listings <- listings%>%
mutate(room_size = ifelse(grepl('Entire', listings$room_type),10,
ifelse(grepl('Private', listings$room_type),5,
ifelse(grepl('Shared', listings$room_type),3,room_size))))
nei_groups<- levels(listings$neighbourhood_group)
palc <- colorFactor(c("#e6e715","#e7152a","#2766c9"), c(3,5,10))
long <- function(area){
if(area == "Bronx"){
return(-73.86641)
}else if(area == "Brooklyn"){
return(-73.949997)
}else if(area == "Staten Island"){
return(-74.151535)
}else if(area == "Queens"){
return(-73.769417)
}else{
return(-73.9808)
}
}
lat <- function(area){
if(area == "Bronx"){
return(40.84985)
}else if(area == "Brooklyn"){
return(40.650002)
}else if(area == "Staten Island"){
return(40.579021)
}else if(area == "Queens"){
return(40.742054)
}else{
return(40.7648)
}
}
zoom <- function(area){
if(area == "All Neighborhoods"||area == "None Selected"){
return(10)
}else
return(15)
}
mean_list <- c(1,2,3,4,5)
for(i in 1:length(nei_groups)){
mean<- listings%>%filter(neighbourhood_group==nei_groups[i])%>%select(price)%>%summarise(mean(price))
mean_list[i] <- mean[1,1]
}
h_2 <- data.frame("Neighbor" =nei_groups, "PriceMean" = mean_list)
borough_price <- geo_join(bound, h_2,"boro_name","Neighbor")
bins <- c(80, 100, 120, 140, 160, 180,200)
palc_price <- colorBin("YlOrRd", domain = borough_price$PriceMean, bins = bins)
View(borough_price)
runApp()
palc_price(PriceMean)
palc_price(borough_price$PriceMean)
runApp()
runApp()
View(listings)
runApp()
runApp()
runApp()
